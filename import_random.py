import random
import openpyxl
import string
from datetime import datetime, timedelta

# Функция для генерации случайных имен, фамилий и отчеств
def generate_random_name():
    first_names = [
        'Александр', 'Максим', 'Дмитрий', 'Сергей', 'Алексей', 'Андрей', 'Павел', 'Иван',
        'Николай', 'Владимир', 'Виктор', 'Юрий', 'Константин', 'Олег', 'Роман', 'Антон',
        'Евгений', 'Леонид', 'Георгий', 'Тимофей', 'Кирилл', 'Игорь', 'Станислав', 'Фёдор',
        'Григорий', 'Борис', 'Виталий', 'Артём', 'Артур', 'Арсений', 'Вадим', 'Даниил',
        'Тимур', 'Семён', 'Михаил'
    ]
    last_names = [
        'Иванов', 'Петров', 'Сидоров', 'Кузнецов', 'Семенов', 'Соловьев', 'Малышев', 'Николаев',
        'Смирнов', 'Попов', 'Васильев', 'Михайлов', 'Новиков', 'Федоров', 'Морозов', 'Волков',
        'Алексеев', 'Лебедев', 'Егоров', 'Павлов', 'Козлов', 'Степанов', 'Никитин', 'Орлов',
        'Андреев', 'Макаров', 'Никифоров', 'Захаров', 'Зайцев', 'Борисов', 'Яковлев', 'Григорьев',
        'Романов', 'Воробьев', 'Сергеев', 'Фролов', 'Александров', 'Дмитриев', 'Королев', 'Гусев',
        'Киселев', 'Ильин', 'Максимов', 'Поляков', 'Сорокин', 'Виноградов', 'Ковалев', 'Белов',
        'Медведев', 'Антонов', 'Тарасов', 'Жуков', 'Поляков', 'Комаров', 'Сафонов', 'Быков',
        'Сидоренко', 'Титов', 'Федотов', 'Голубев', 'Калинин', 'Карпов', 'Чернов', 'Афанасьев',
        'Максименко', 'Баранов', 'Миронов', 'Фролов', 'Журавлев', 'Селезнев', 'Пономарев', 'Герасимов',
        'Богданов', 'Осипов', 'Кудрявцев', 'Матвеев', 'Савельев', 'Марков', 'Назаров', 'Данилов',
        'Сорокин', 'Белкин', 'Суханов', 'Руднев', 'Яшин', 'Соколов', 'Тихонов', 'Булгаков'
    ]
    patronymics = ['Алексеевич', 'Дмитриевич', 'Сергеевич', 'Александрович', 'Николаевич', 'Владимирович', 'Петрович']

    first_name = random.choice(first_names)
    last_name = random.choice(last_names)
    patronymic = random.choice(patronymics)

    return first_name, last_name, patronymic

# Функция для генерации случайного телефона
def generate_random_phone():
    # Российский формат: +7 (XXX) XXX-XX-XX
    area_codes = ['495', '812', '343', '383', '473', '351', '381', '401', '472', '485']
    area_code = random.choice(area_codes)
    number = ''.join([str(random.randint(0, 9)) for _ in range(7)])
    return f"+7 ({area_code}) {number[:3]}-{number[3:5]}-{number[5:]}"

# Функция для генерации случайного Telegram username
def generate_random_telegram():
    username_length = random.randint(5, 12)
    username_chars = string.ascii_lowercase + string.digits + '_'
    username = ''.join(random.choice(username_chars) for _ in range(username_length))
    return f"@{username}"

# Функция для генерации случайной IT-компании и должности (Россия)
def generate_random_it_job():
    companies = [
        'Яндекс', 'VK', 'СберТех', 'Тинькофф', 'Лаборатория Касперского', '1С', 'Авито', 'Озон',
        'Рамблер', 'Ростелеком-Солар', 'МТС', 'МегаФон', 'Positive Technologies', 'JetBrains',
        'Альфа-Банк', 'ВТБ', 'Газпром Нефть Цифровые Решения', 'Скайэнг', 'СКБ Контур',
        'Яндекс Практикум', 'HeadHunter', 'Циан', 'Skyeng', 'Skillbox'
    ]
    positions = [
        'Разработчик Python', 'Разработчик Java', 'Frontend-разработчик', 'Backend-разработчик',
        'Fullstack-разработчик', 'DevOps-инженер', 'SRE-инженер', 'QA-инженер', 'Тестировщик',
        'Аналитик данных', 'Data Engineer', 'Data Scientist', 'Системный администратор',
        'Инженер по информационной безопасности', 'Product Manager', 'Project Manager',
        'Бизнес-аналитик', 'Архитектор ПО', 'Mobile-разработчик (iOS)', 'Mobile-разработчик (Android)'
    ]

    company = random.choice(companies)
    position = random.choice(positions)
    return company, position

# Функция для генерации случайных зарплатных ожиданий
def generate_salary_expectations():
    # Зарплаты в тысячах рублей для IT-специалистов в России
    base_salaries = {
        'Разработчик Python': (120, 300),
        'Разработчик Java': (130, 320),
        'Frontend-разработчик': (110, 280),
        'Backend-разработчик': (120, 300),
        'Fullstack-разработчик': (140, 350),
        'DevOps-инженер': (130, 320),
        'SRE-инженер': (140, 350),
        'QA-инженер': (90, 220),
        'Тестировщик': (70, 180),
        'Аналитик данных': (100, 250),
        'Data Engineer': (120, 300),
        'Data Scientist': (130, 320),
        'Системный администратор': (80, 200),
        'Инженер по информационной безопасности': (110, 280),
        'Product Manager': (120, 300),
        'Project Manager': (110, 280),
        'Бизнес-аналитик': (100, 250),
        'Архитектор ПО': (150, 400),
        'Mobile-разработчик (iOS)': (120, 300),
        'Mobile-разработчик (Android)': (110, 280)
    }
    
    position = random.choice(list(base_salaries.keys()))
    min_salary, max_salary = base_salaries[position]
    salary = random.randint(min_salary, max_salary)
    return f"{salary} тыс. руб."

# Функция для генерации случайной даты рождения
def generate_random_birth_date():
    # Генерируем дату рождения для людей 22-55 лет
    start_date = datetime.now() - timedelta(days=55*365)
    end_date = datetime.now() - timedelta(days=22*365)
    
    time_between_dates = end_date - start_date
    days_between_dates = time_between_dates.days
    random_number_of_days = random.randrange(days_between_dates)
    random_date = start_date + timedelta(days=random_number_of_days)
    
    return random_date.strftime("%d.%m.%Y")

# Функция для генерации случайного e-mail (RU-домены)
def generate_random_email():
    domains = ['yandex.ru', 'mail.ru', 'bk.ru', 'inbox.ru', 'list.ru', 'rambler.ru']
    username_length = random.randint(8, 12)
    username_chars = string.ascii_lowercase + string.digits
    username = ''.join(random.choice(username_chars) for _ in range(username_length))
    domain = random.choice(domains)
    return f"{username}@{domain}"

# Функция для генерации случайного комментария о работнике
def generate_random_comment():
    comments = [
        'Ответственный и пунктуальный специалист',
        'Быстро обучается и инициативен',
        'Отличные коммуникативные навыки',
        'Сильные аналитические способности',
        'Хорошо работает в команде',
        'Внимателен к деталям',
        'Проактивен и ориентирован на результат',
        'Стремится к постоянному развитию',
        'Надежный и исполнительный сотрудник',
        'Успешно внедрял улучшения в проектах',
        'Отличный командный игрок',
        'Высокая работоспособность',
        'Креативный подход к решению задач',
        'Сильные лидерские качества',
        'Отличные навыки презентации'
    ]
    return random.choice(comments)

# Функция для генерации краткого тест-резюме на основе должности
def generate_resume_for_position(position: str) -> str:
    # Базовые шаблоны для каждой должности
    base_templates = {
        'Разработчик Python': 'Опыт разработки на Python, Django/FastAPI, SQL, тестирование и CI/CD.',
        'Разработчик Java': 'Коммерческий опыт Java, Spring, микросервисы, Kafka, PostgreSQL.',
        'Frontend-разработчик': 'React/Vue, TypeScript, адаптивная верстка, оптимизация производительности.',
        'Backend-разработчик': 'Проектирование API, микросервисы, базы данных, мониторинг и логирование.',
        'Fullstack-разработчик': 'Опыт фронта и бэка, React, Node.js/Python, DevOps-практики.',
        'DevOps-инженер': 'CI/CD, Docker, Kubernetes, Terraform, мониторинг и безопасность.',
        'SRE-инженер': 'Надежность сервисов, SLO/SLA, алертинг, инфраструктура как код.',
        'QA-инженер': 'Функциональное и автоматизированное тестирование, тест-дизайн, отчётность.',
        'Тестировщик': 'Ручное тестирование, составление чек-листов, баг-трекинг, регресс.',
        'Аналитик данных': 'SQL, Python, визуализация данных, A/B тесты, продуктовая аналитика.',
        'Data Engineer': 'ETL/ELT, Airflow, Spark, хранилища данных, качество данных.',
        'Data Scientist': 'ML-модели, sklearn/pyTorch, фичеинжиниринг, валидация и деплой.',
        'Системный администратор': 'Администрирование Linux/Windows, сети, мониторинг, безопасность.',
        'Инженер по информационной безопасности': 'Threat modeling, SOC, SIEM, pentest, политики ИБ.',
        'Product Manager': 'Дискавери, приоритизация, метрики, гипотезы и гипотез-тестирование.',
        'Project Manager': 'Планирование, риски, коммуникации, отчётность, Agile/Scrum/Kanban.',
        'Бизнес-аналитик': 'Сбор требований, BPMN/UML, постановка задач, acceptance критерии.',
        'Архитектор ПО': 'Архитектура систем, интеграции, NFR, выбор технологий, ревью дизайна.',
        'Mobile-разработчик (iOS)': 'Swift, UIKit/SwiftUI, архитектуры MVVM/VIPER, App Store релизы.',
        'Mobile-разработчик (Android)': 'Kotlin, Jetpack, архитектуры MVVM/MVI, релизы в Google Play.'
    }
    
    base_text = base_templates.get(position, f'Опыт по направлению: {position}. Успешная работа в проектах и командное взаимодействие.')
    
    # Дополнительные детали для увеличения размера
    additional_details = [
        "В процессе работы активно использовал современные методологии разработки, включая Agile, Scrum и Kanban. Применял принципы SOLID, DRY и KISS для написания чистого и поддерживаемого кода. Имею опыт работы с системами контроля версий Git, включая создание веток, слияние изменений и разрешение конфликтов. Участвовал в code review процессах, как в роли ревьюера, так и в роли автора кода. Опыт работы с различными системами сборки и развертывания, включая Jenkins, GitLab CI/CD, GitHub Actions и Azure DevOps.",
        
        "Принимал участие в планировании спринтов, оценке задач и составлении технических заданий. Работал с системами управления проектами Jira, Confluence, Trello и Asana. Имею опыт интеграции различных API и сервисов, включая REST, GraphQL, gRPC и WebSocket. Работал с базами данных SQL (PostgreSQL, MySQL, SQL Server) и NoSQL (MongoDB, Redis, Cassandra). Применял принципы микросервисной архитектуры и работал с контейнеризацией Docker и оркестрацией Kubernetes.",
        
        "Опыт работы с облачными платформами AWS, Google Cloud Platform и Microsoft Azure. Знание принципов безопасности при разработке, включая OWASP Top 10, аутентификацию и авторизацию, шифрование данных и защиту от SQL-инъекций. Опыт работы с системами мониторинга и логирования: Prometheus, Grafana, ELK Stack, Splunk. Применял принципы автоматизированного тестирования, включая unit-тесты, интеграционные тесты и end-to-end тесты. Работал с фреймворками тестирования JUnit, TestNG, PyTest, Jest и Cypress.",
        
        "Имею опыт работы с системами управления зависимостями Maven, Gradle, npm, pip и yarn. Применял принципы непрерывной интеграции и непрерывной доставки (CI/CD). Работал с системами управления конфигурациями Ansible, Puppet и Chef. Опыт работы с системами управления контейнерами Docker и оркестрации Kubernetes. Знание принципов масштабирования приложений, включая горизонтальное и вертикальное масштабирование, балансировку нагрузки и кэширование.",
        
        "Применял принципы DevOps и Site Reliability Engineering (SRE). Опыт работы с системами мониторинга производительности и профилирования кода. Работал с системами управления логами и трейсингом: ELK Stack, Jaeger, Zipkin. Имею опыт работы с системами управления секретами HashiCorp Vault и AWS Secrets Manager. Применял принципы инфраструктуры как код (IaC) с использованием Terraform, CloudFormation и ARM Templates.",
        
        "Опыт работы с системами управления базами данных, включая миграции, бэкапы и восстановление данных. Применял принципы оптимизации запросов и индексирования баз данных. Работал с системами управления очередями сообщений: Apache Kafka, RabbitMQ, Apache ActiveMQ и Amazon SQS. Имею опыт работы с системами кэширования Redis, Memcached и Hazelcast. Применял принципы распределенных систем и работал с паттернами проектирования для обеспечения высокой доступности.",
        
        "Работал с системами управления конфигурациями и секретами. Опыт работы с системами мониторинга и алертинга. Применял принципы безопасности при разработке и эксплуатации систем. Имею опыт работы с системами управления инцидентами и проблемами. Работал с системами управления изменениями и релизами. Применял принципы управления знаниями и документации технических решений.",
        
        "Опыт работы с системами управления требованиями и тестирования. Применял принципы управления качеством и метриками. Работал с системами управления рисками и соответствия. Имею опыт работы с системами управления безопасностью и аудита. Применял принципы управления производительностью и оптимизации систем. Работаю с системами управления доступом и аутентификацией.",
        
        "Применял принципы управления данными и их качества. Опыт работы с системами управления метаданными и каталогизации данных. Работал с системами управления машинным обучением и искусственным интеллектом. Имею опыт работы с системами управления аналитикой и отчетностью. Применял принципы управления инновациями и технологическими решениями. Работал с системами управления изменениями и трансформацией.",
        
        "Опыт работы с системами управления проектами и портфелями. Применял принципы управления ресурсами и планирования. Работал с системами управления коммуникациями и заинтересованными сторонами. Имею опыт работы с системами управления качеством и процессами. Применял принципы управления рисками и возможностями. Работал с системами управления закупками и поставщиками."
    ]
    
    # Создаем очень длинный текст резюме
    long_resume = base_text + "\n\n" + "\n\n".join(additional_details)
    
    # Добавляем еще больше текста для достижения максимального размера
    extra_content = [
        "В рамках профессионального развития постоянно изучаю новые технологии и подходы к разработке. Посещаю конференции, вебинары и технические митапы для расширения кругозора и обмена опытом с коллегами. Участвую в open-source проектах и вношу свой вклад в развитие технологического сообщества. Веду технический блог и делюсь знаниями через статьи и презентации.",
        
        "Имею сертификации по различным технологиям и платформам, что подтверждает высокий уровень компетенций. Регулярно прохожу обучение и повышаю квалификацию в соответствии с современными требованиями рынка. Участвую в программах менторства и помогаю коллегам в развитии их навыков. Активно участвую в технических дискуссиях и помогаю принимать обоснованные решения по выбору технологий.",
        
        "Применяю принципы clean code и постоянно работаю над улучшением качества кода. Использую различные инструменты для статического анализа кода и автоматического форматирования. Применяю принципы pair programming и collaborative development для повышения качества и скорости разработки. Работаю с системами управления качеством кода и автоматическими проверками при pull request.",
        
        "Имею опыт работы с различными методологиями разработки и адаптирую их под специфику проекта. Применяю принципы lean development и continuous improvement для оптимизации процессов разработки. Работаю с системами управления знаниями и документацией для обеспечения преемственности и обучения новых сотрудников. Применяю принципы agile coaching и помогаю командам в переходе на agile методологии.",
        
        "Опыт работы с системами управления требованиями и их трассируемостью. Применяю принципы управления изменениями и их влиянием на проект. Работаю с системами управления конфигурациями и версионирования. Имею опыт работы с системами управления тестированием и автоматизацией тестов. Применяю принципы управления производительностью и оптимизации систем. Работаю с системами управления безопасностью и соответствия стандартам."
    ]
    
    # Добавляем еще больше контента
    long_resume += "\n\n" + "\n\n".join(extra_content)
    
    # Добавляем повторяющиеся блоки для увеличения размера
    repeat_blocks = [
        "Технические навыки включают глубокое знание языков программирования, фреймворков и библиотек. Опыт работы с различными архитектурными паттернами и принципами проектирования. Знание принципов работы с базами данных, включая проектирование схем, оптимизацию запросов и управление транзакциями. Опыт работы с системами контроля версий и управления исходным кодом.",
        
        "Проектный опыт включает участие в разработке крупных корпоративных систем и высоконагруженных приложений. Работа с международными командами и проектами в различных часовых поясах. Опыт управления техническими командами и координации работы разработчиков. Применение принципов agile и lean в управлении проектами и продуктами.",
        
        "Коммуникативные навыки позволяют эффективно взаимодействовать с заказчиками, менеджерами проектов и техническими специалистами. Опыт проведения технических презентаций и демонстраций для различных аудиторий. Умение объяснять сложные технические концепции простым языком. Опыт работы с документацией и техническими спецификациями.",
        
        "Лидерские качества проявляются в способности мотивировать команду и вести ее к достижению целей. Опыт принятия сложных технических решений и управления рисками. Способность работать в условиях неопределенности и быстро адаптироваться к изменениям. Опыт разрешения конфликтов и построения эффективных рабочих отношений.",
        
        "Инновационное мышление позволяет находить нестандартные решения сложных технических задач. Опыт внедрения новых технологий и подходов в существующие проекты. Способность анализировать тренды в технологической сфере и применять их в работе. Опыт работы с экспериментальными технологиями и прототипирования решений."
    ]
    
    # Добавляем повторяющиеся блоки несколько раз для максимального увеличения размера
    for _ in range(10):
        long_resume += "\n\n" + "\n\n".join(repeat_blocks)
    
    # Добавляем еще больше технических деталей
    technical_details = [
        "В области разработки веб-приложений имею глубокие знания HTML5, CSS3, JavaScript ES6+, TypeScript, React, Vue.js, Angular, Node.js, Express.js, Next.js, Nuxt.js. Опыт работы с современными инструментами сборки: Webpack, Vite, Rollup, Parcel. Знание принципов Progressive Web Apps (PWA), Service Workers, Web Components. Опыт работы с CSS-препроцессорами: Sass, Less, Stylus. Применение CSS-in-JS решений: styled-components, emotion, CSS Modules.",
        
        "В области backend разработки опыт работы с Python (Django, Flask, FastAPI, Pyramid), Java (Spring Boot, Spring Framework, Hibernate, Maven, Gradle), C# (.NET Core, ASP.NET, Entity Framework), Go (Gin, Echo, Gorilla Mux), Node.js (Express, Koa, Hapi). Знание принципов REST API, GraphQL, gRPC, WebSocket. Опыт работы с ORM: SQLAlchemy, Hibernate, Entity Framework, GORM. Применение принципов Domain-Driven Design (DDD), Event Sourcing, CQRS.",
        
        "В области баз данных опыт работы с реляционными СУБД: PostgreSQL, MySQL, SQL Server, Oracle, SQLite. NoSQL базы данных: MongoDB, Redis, Cassandra, CouchDB, Neo4j. Опыт работы с системами управления миграциями: Alembic, Flyway, Liquibase, Entity Framework Migrations. Знание принципов проектирования схем баз данных, нормализации, денормализации, индексирования. Опыт работы с репликацией, шардингом, партиционированием.",
        
        "В области DevOps и CI/CD опыт работы с системами контроля версий: Git, GitLab, GitHub, Bitbucket. Системы непрерывной интеграции: Jenkins, GitLab CI/CD, GitHub Actions, CircleCI, Travis CI, TeamCity. Контейнеризация: Docker, Docker Compose, Docker Swarm. Оркестрация: Kubernetes, OpenShift, Rancher. Инфраструктура как код: Terraform, CloudFormation, ARM Templates, Ansible, Puppet, Chef.",
        
        "В области мониторинга и логирования опыт работы с системами мониторинга: Prometheus, Grafana, Nagios, Zabbix, Datadog, New Relic. Системы логирования: ELK Stack (Elasticsearch, Logstash, Kibana), Fluentd, Fluent Bit, Splunk. Трассировка: Jaeger, Zipkin, OpenTelemetry. Алертинг: AlertManager, PagerDuty, OpsGenie. Метрики: Prometheus, InfluxDB, Graphite, StatsD.",
        
        "В области безопасности опыт работы с принципами OWASP Top 10, аутентификацией и авторизацией: OAuth 2.0, OpenID Connect, JWT, SAML. Шифрование: AES, RSA, SHA, bcrypt, Argon2. Защита от уязвимостей: SQL Injection, XSS, CSRF, SSRF. Системы управления секретами: HashiCorp Vault, AWS Secrets Manager, Azure Key Vault. Пентестинг: Burp Suite, OWASP ZAP, Metasploit.",
        
        "В области тестирования опыт работы с unit-тестированием: JUnit, TestNG, PyTest, Jest, Mocha, NUnit. Интеграционное тестирование: TestContainers, WireMock, Mountebank. End-to-end тестирование: Selenium, Cypress, Playwright, Appium. Performance тестирование: JMeter, Gatling, K6, Artillery. API тестирование: Postman, RestAssured, Supertest, Newman.",
        
        "В области облачных платформ опыт работы с AWS: EC2, S3, RDS, Lambda, CloudFormation, CloudWatch, IAM, VPC, Route53, SQS, SNS, DynamoDB, ElastiCache, ECS, EKS. Google Cloud Platform: Compute Engine, Cloud Storage, Cloud SQL, Cloud Functions, Cloud Run, Kubernetes Engine, BigQuery, Pub/Sub. Microsoft Azure: Virtual Machines, Blob Storage, SQL Database, Functions, App Service, Kubernetes Service, Cosmos DB, Service Bus.",
        
        "В области машинного обучения и AI опыт работы с библиотеками: scikit-learn, TensorFlow, PyTorch, Keras, XGBoost, LightGBM. Обработка данных: pandas, NumPy, SciPy, Matplotlib, Seaborn, Plotly. NLP: NLTK, spaCy, Transformers, BERT, GPT. Компьютерное зрение: OpenCV, PIL, scikit-image. MLOps: MLflow, Kubeflow, DVC, Weights & Biases.",
        
        "В области мобильной разработки iOS опыт работы с Swift, SwiftUI, UIKit, Core Data, Core Animation, Core Location, MapKit, AVFoundation, Core ML, Vision Framework. Android: Kotlin, Java, Jetpack Compose, Android SDK, Room, LiveData, ViewModel, Navigation Component, WorkManager, Data Binding. Кроссплатформенная разработка: React Native, Flutter, Xamarin, Ionic."
    ]
    
    # Добавляем технические детали
    for _ in range(5):
        long_resume += "\n\n" + "\n\n".join(technical_details)
    
    # Добавляем еще больше повторяющегося контента
    final_blocks = [
        "Профессиональные достижения включают успешную реализацию проектов с бюджетом более 10 миллионов рублей, сокращение времени развертывания приложений с нескольких часов до нескольких минут, повышение производительности систем в 3-5 раз, внедрение автоматизации тестирования, что сократило количество багов в продакшене на 70%, оптимизация баз данных, что привело к ускорению работы приложений в 2-3 раза.",
        
        "Международный опыт работы включает участие в проектах для компаний из США, Европы и Азии, работа в распределенных командах с коллегами из разных стран, адаптация к различным культурным особенностям и часовым поясам, опыт работы с международными стандартами качества и безопасности, участие в международных конференциях и технических митапах, публикации в международных технических изданиях.",
        
        "Лидерство и менторство проявляется в руководстве командами разработчиков от 5 до 20 человек, проведение технических интервью и оценка кандидатов, создание программ обучения и развития для junior разработчиков, организация внутренних технических митапов и хакатонов, участие в программах стажировки студентов технических вузов, создание технической документации и стандартов кодирования для команд.",
        
        "Инновации и исследования включают участие в исследовательских проектах в области искусственного интеллекта и машинного обучения, разработка прототипов новых технологических решений, патентование изобретений в области программного обеспечения, публикации в научных журналах и на конференциях, сотрудничество с научно-исследовательскими институтами и университетами, участие в программах грантов и инновационных проектов.",
        
        "Социальная ответственность проявляется в участии в программах цифровой грамотности для пожилых людей, обучение программированию детей и подростков, участие в благотворительных проектах по разработке программного обеспечения для некоммерческих организаций, поддержка open-source проектов и сообществ разработчиков, участие в программах по сокращению цифрового разрыва, волонтерство в технических образовательных проектах."
    ]
    
    # Добавляем финальные блоки несколько раз
    for _ in range(8):
        long_resume += "\n\n" + "\n\n".join(final_blocks)
    
    return long_resume

# Создание новой рабочей книги и активного листа
wb = openpyxl.Workbook()
ws = wb.active
ws.title = "Контакты"

# Заголовки столбцов согласно требованиям
headers = [
    "Фамилия", "Имя", "Отчество", "Телефон", "Электронная почта", 
    "Telegram", "Должность", "Компания", "Зарплатные ожидания", 
    "Дата рождения (ДД.ММ.ГГГГ)", "Комментарий (личные заметки)", "Текст резюме"
]
ws.append(headers)

# Генерация 10000 строк данных для достижения размера более 15 МБ
for _ in range(10000):
    first_name, last_name, patronymic = generate_random_name()
    phone = generate_random_phone()
    email = generate_random_email()
    telegram = generate_random_telegram()
    company, position = generate_random_it_job()
    salary = generate_salary_expectations()
    birth_date = generate_random_birth_date()
    comment = generate_random_comment()
    resume = generate_resume_for_position(position)
    
    # Добавляем строку с данными в правильном порядке
    ws.append([
        last_name, first_name, patronymic, phone, email, telegram,
        position, company, salary, birth_date, comment, resume
    ])

# Сохранение файла
wb.save("200.xlsx")

print("Файл '200.xlsx' успешно создан с нужными столбцами.")
print(f"Сгенерировано {10000} записей для достижения размера более 15 МБ.")